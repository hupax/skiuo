version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: streammind-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-streammind}
      POSTGRES_USER: ${POSTGRES_USER:-streammind}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Asia/Shanghai
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-streammind}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - streammind-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: streammind-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      TZ: Asia/Shanghai
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - streammind-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Spring Boot Core Service
  core-service:
    build:
      context: .
      dockerfile: core-service/Dockerfile
    container_name: streammind-core
    # Temporarily disable healthcheck for debugging
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-streammind}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-streammind}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

      # Redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

      # JWT
      JWT_SECRET: ${JWT_SECRET}

      # Server
      SERVER_PORT: 8080
      GRPC_SERVER_PORT: 9090
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}

      # Logging
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL:-INFO}
      LOGGING_LEVEL_COM_SKIUO_STREAMMIND: ${LOG_LEVEL:-INFO}

      # Timezone
      TZ: Asia/Shanghai

      # JVM Options (already set in Dockerfile, can override here)
      JAVA_OPTS: ${JAVA_OPTS:--Xms512m -Xmx1024m}
    ports:
      - "${CORE_SERVICE_PORT:-8080}:8080"
      - "${GRPC_PORT:-9090}:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streammind-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Python AI Service
  ai-service:
    build:
      context: .
      dockerfile: ai-service/Dockerfile
    container_name: streammind-ai
    environment:
      # Qwen API
      QWEN_API_KEY: ${QWEN_API_KEY}
      QWEN_API_URL: ${QWEN_API_URL:-https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation}

      # Spring Boot gRPC
      SPRING_BOOT_GRPC_HOST: core-service
      SPRING_BOOT_GRPC_PORT: 9090

      # Service Port
      PYTHON_SERVICE_PORT: 8000

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Timezone
      TZ: Asia/Shanghai
    ports:
      - "${AI_SERVICE_PORT:-8000}:8000"
    depends_on:
      core-service:
        condition: service_healthy
    networks:
      - streammind-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Node.js Signaling Service (deployed separately on server)
  # signaling-service:
  #   This service is deployed separately using PM2 on the server
  #   See README.md for deployment instructions

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  streammind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
