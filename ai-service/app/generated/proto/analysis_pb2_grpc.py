# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import analysis_pb2 as proto_dot_analysis__pb2


class AnalysisServiceStub(object):
    """Analysis service for receiving AI analysis results from Python service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveAnalysis = channel.unary_unary(
                '/analysis.AnalysisService/SaveAnalysis',
                request_serializer=proto_dot_analysis__pb2.AnalysisRequest.SerializeToString,
                response_deserializer=proto_dot_analysis__pb2.AnalysisResponse.FromString,
                )
        self.GetAnalysis = channel.unary_stream(
                '/analysis.AnalysisService/GetAnalysis',
                request_serializer=proto_dot_analysis__pb2.GetAnalysisRequest.SerializeToString,
                response_deserializer=proto_dot_analysis__pb2.AnalysisChunk.FromString,
                )


class AnalysisServiceServicer(object):
    """Analysis service for receiving AI analysis results from Python service
    """

    def SaveAnalysis(self, request, context):
        """Save a single analysis token (streaming from Python to Spring Boot)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnalysis(self, request, context):
        """Get analysis results for a session (streaming from Spring Boot to clients)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveAnalysis,
                    request_deserializer=proto_dot_analysis__pb2.AnalysisRequest.FromString,
                    response_serializer=proto_dot_analysis__pb2.AnalysisResponse.SerializeToString,
            ),
            'GetAnalysis': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAnalysis,
                    request_deserializer=proto_dot_analysis__pb2.GetAnalysisRequest.FromString,
                    response_serializer=proto_dot_analysis__pb2.AnalysisChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'analysis.AnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnalysisService(object):
    """Analysis service for receiving AI analysis results from Python service
    """

    @staticmethod
    def SaveAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analysis.AnalysisService/SaveAnalysis',
            proto_dot_analysis__pb2.AnalysisRequest.SerializeToString,
            proto_dot_analysis__pb2.AnalysisResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/analysis.AnalysisService/GetAnalysis',
            proto_dot_analysis__pb2.GetAnalysisRequest.SerializeToString,
            proto_dot_analysis__pb2.AnalysisChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
